name: 'validate-metrics'
description: 'Validate metrics from Azure Monitor'
inputs:
  metric:
    description: name of the metric
    required: True
  aggregation:
    description: "type of aggregation. Typical supported ones by the resources: Average, Maximum, Minimum"
    required: True
  metrics_condition:
    description: condition to compare metrics value and threshold, allowed lte (less than equals) and gte (greater than equals)
    required: True
  interval:
    description: "supported intervals will be in format e.g. for minutes: PT1M, for hours: PT12H,for day: P1D. More examples here: https://docs.microsoft.com/en-us/rest/api/monitor/metricdefinitions/list"
    required: True
    default: PT1M
  threshold:
    description: "threshold value to compare the metric with (a number)"
    required: True
  resource_id:
    description: arm resource id of the resource
    required: True
  start_time:
    description: date time in ISO 8601 format (default in UTC timezone) e.g 02-21-2021 21:14:00
    required: False
  end_time:
    description: date time in ISO 8601 format (default in UTC timezone) e.g 02-21-2021 21:14:00
    required: False
  filter:
    description: "Azure monitor chart filter condition. e.g.: deployment eq 'blue' and statusCodeClass ne '2xx'. For more information on filter syntax refer https://docs.microsoft.com/en-us/rest/api/monitor/metrics/list"
    required: False
  num_intervals:
    description: "required only when start and end date not provided. The metrics are retrieived for num_intervals time from current time. For e.g. if interval is PT1M and num_intervals is 5, then 5 metric values are pulled."
    required: False
  allow_empty_metrics:
    description: if False will throw error incase metrics are not available for the given duration
    required: False
    default: "False"
  chart_name:
    description: file name for chart to save
    default: chart
    required: False
  chart_save_path:
    description: path to save charts
    required: False
    default: chart_output

runs:  
  using: "composite"
  steps:
    - name: create venv if it does not exist
      run: |
        pip list        
        if [ ! -d "$HOME/metrics-venv" ]; then
          echo "Creating venv"
          python -m venv $HOME/metrics-venv
          source $HOME/metrics-venv/bin/activate
          echo "install dependencies"
          pip install -r requirements.txt
        else
          echo "venv already exists"          
        fi
        source $HOME/metrics-venv/bin/activate        
      shell: bash
      working-directory: ${{ github.action_path }}

    - run: |
        source $HOME/metrics-venv/bin/activate        
        python -m metrics.validate_metrics --chart_name "${{ inputs.chart_name }}" --chart_save_path "${{ inputs.chart_save_path }}" --metric "${{ inputs.metric }}" --aggregation "${{ inputs.aggregation }}" --metrics_condition "${{ inputs.metrics_condition }}" --interval "${{ inputs.interval }}" --num_intervals "${{ inputs.num_intervals }}" --filter "${{ inputs.filter }}"  --threshold "${{ inputs.threshold }}" --resource_id "${{ inputs.resource_id }}"
      shell: bash
      working-directory: ${{ github.action_path }}

    
